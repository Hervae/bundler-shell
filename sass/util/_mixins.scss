// A mixin for font sizing in px with rem fallback. Defines some global vars.
@mixin type-size($font-size, $line-size: 0) {
  font-size: $font-size + px;
  font-size: ($font-size / $base-font-size) * 1rem;

  @if $line-size > 0 {
    line-height: $line-size + px;
    line-height: ($line-size / $base-font-size) * 1rem;
  }
}

@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem * 1;
  // Print the first line in pixel values
  #{$property}: $px-values;
  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == "number" {
    #{$property}: $px-values / $baseline-rem; }
  @else {
    // Create an empty list that we can dump values into
    $rem-values: ();
    @each $value in $px-values {
      // If the value is zero or not a number, return it
      @if $value == 0 or type-of( $value ) != "number" {
        $rem-values: append($rem-values, $value); }
      @else {
        $rem-values: append($rem-values, $value / $baseline-rem); } }
    // Return the property and its list of converted values
    #{$property}: $rem-values; }
}

@mixin embed-container($width, $height) {
  $ratio: ($height / $width) * 100%;

  position: relative;
  padding-bottom: $ratio;
  height: 0;
  overflow: hidden;
  max-width: 100%;

  iframe, object, embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}
